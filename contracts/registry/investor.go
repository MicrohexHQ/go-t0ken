// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package registry

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// InvestorABI is the input ABI used to generate the binding from.
const InvestorABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"accreditation\",\"type\":\"uint48\"}],\"name\":\"setAccreditation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"setLocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"country\",\"type\":\"bytes2\"}],\"name\":\"setCountry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"country\",\"type\":\"bytes2\"},{\"name\":\"accreditation\",\"type\":\"uint48\"}],\"name\":\"add\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAccreditation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint48\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"s\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"store\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"setFrozen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getCountry\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes2\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"setHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"InvestorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"InvestorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"frozen\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"InvestorFrozen\",\"type\":\"event\"}]"

// InvestorBin is the compiled bytecode used for deploying new contracts.
const InvestorBin = ``

// DeployInvestor deploys a new Ethereum contract, binding an instance of Investor to it.
func DeployInvestor(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Investor, error) {
	parsed, err := abi.JSON(strings.NewReader(InvestorABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(InvestorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Investor{InvestorCaller: InvestorCaller{contract: contract}, InvestorTransactor: InvestorTransactor{contract: contract}, InvestorFilterer: InvestorFilterer{contract: contract}}, nil
}

// Investor is an auto generated Go binding around an Ethereum contract.
type Investor struct {
	InvestorCaller     // Read-only binding to the contract
	InvestorTransactor // Write-only binding to the contract
	InvestorFilterer   // Log filterer for contract events
}

// InvestorCaller is an auto generated read-only Go binding around an Ethereum contract.
type InvestorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InvestorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type InvestorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InvestorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type InvestorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InvestorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type InvestorSession struct {
	Contract     *Investor         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// InvestorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type InvestorCallerSession struct {
	Contract *InvestorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// InvestorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type InvestorTransactorSession struct {
	Contract     *InvestorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// InvestorRaw is an auto generated low-level Go binding around an Ethereum contract.
type InvestorRaw struct {
	Contract *Investor // Generic contract binding to access the raw methods on
}

// InvestorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type InvestorCallerRaw struct {
	Contract *InvestorCaller // Generic read-only contract binding to access the raw methods on
}

// InvestorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type InvestorTransactorRaw struct {
	Contract *InvestorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewInvestor creates a new instance of Investor, bound to a specific deployed contract.
func NewInvestor(address common.Address, backend bind.ContractBackend) (*Investor, error) {
	contract, err := bindInvestor(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Investor{InvestorCaller: InvestorCaller{contract: contract}, InvestorTransactor: InvestorTransactor{contract: contract}, InvestorFilterer: InvestorFilterer{contract: contract}}, nil
}

// NewInvestorCaller creates a new read-only instance of Investor, bound to a specific deployed contract.
func NewInvestorCaller(address common.Address, caller bind.ContractCaller) (*InvestorCaller, error) {
	contract, err := bindInvestor(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &InvestorCaller{contract: contract}, nil
}

// NewInvestorTransactor creates a new write-only instance of Investor, bound to a specific deployed contract.
func NewInvestorTransactor(address common.Address, transactor bind.ContractTransactor) (*InvestorTransactor, error) {
	contract, err := bindInvestor(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &InvestorTransactor{contract: contract}, nil
}

// NewInvestorFilterer creates a new log filterer instance of Investor, bound to a specific deployed contract.
func NewInvestorFilterer(address common.Address, filterer bind.ContractFilterer) (*InvestorFilterer, error) {
	contract, err := bindInvestor(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &InvestorFilterer{contract: contract}, nil
}

// bindInvestor binds a generic wrapper to an already deployed contract.
func bindInvestor(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(InvestorABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Investor *InvestorRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Investor.Contract.InvestorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Investor *InvestorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Investor.Contract.InvestorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Investor *InvestorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Investor.Contract.InvestorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Investor *InvestorCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Investor.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Investor *InvestorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Investor.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Investor *InvestorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Investor.Contract.contract.Transact(opts, method, params...)
}

// GetAccreditation is a free data retrieval call binding the contract method 0x701ae59f.
//
// Solidity: function getAccreditation(addr address) constant returns(uint48)
func (_Investor *InvestorCaller) GetAccreditation(opts *bind.CallOpts, addr common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Investor.contract.Call(opts, out, "getAccreditation", addr)
	return *ret0, err
}

// GetAccreditation is a free data retrieval call binding the contract method 0x701ae59f.
//
// Solidity: function getAccreditation(addr address) constant returns(uint48)
func (_Investor *InvestorSession) GetAccreditation(addr common.Address) (*big.Int, error) {
	return _Investor.Contract.GetAccreditation(&_Investor.CallOpts, addr)
}

// GetAccreditation is a free data retrieval call binding the contract method 0x701ae59f.
//
// Solidity: function getAccreditation(addr address) constant returns(uint48)
func (_Investor *InvestorCallerSession) GetAccreditation(addr common.Address) (*big.Int, error) {
	return _Investor.Contract.GetAccreditation(&_Investor.CallOpts, addr)
}

// GetCountry is a free data retrieval call binding the contract method 0xd821f92d.
//
// Solidity: function getCountry(addr address) constant returns(bytes2)
func (_Investor *InvestorCaller) GetCountry(opts *bind.CallOpts, addr common.Address) ([2]byte, error) {
	var (
		ret0 = new([2]byte)
	)
	out := ret0
	err := _Investor.contract.Call(opts, out, "getCountry", addr)
	return *ret0, err
}

// GetCountry is a free data retrieval call binding the contract method 0xd821f92d.
//
// Solidity: function getCountry(addr address) constant returns(bytes2)
func (_Investor *InvestorSession) GetCountry(addr common.Address) ([2]byte, error) {
	return _Investor.Contract.GetCountry(&_Investor.CallOpts, addr)
}

// GetCountry is a free data retrieval call binding the contract method 0xd821f92d.
//
// Solidity: function getCountry(addr address) constant returns(bytes2)
func (_Investor *InvestorCallerSession) GetCountry(addr common.Address) ([2]byte, error) {
	return _Investor.Contract.GetCountry(&_Investor.CallOpts, addr)
}

// GetHash is a free data retrieval call binding the contract method 0x1da0b8fc.
//
// Solidity: function getHash(addr address) constant returns(bytes32)
func (_Investor *InvestorCaller) GetHash(opts *bind.CallOpts, addr common.Address) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Investor.contract.Call(opts, out, "getHash", addr)
	return *ret0, err
}

// GetHash is a free data retrieval call binding the contract method 0x1da0b8fc.
//
// Solidity: function getHash(addr address) constant returns(bytes32)
func (_Investor *InvestorSession) GetHash(addr common.Address) ([32]byte, error) {
	return _Investor.Contract.GetHash(&_Investor.CallOpts, addr)
}

// GetHash is a free data retrieval call binding the contract method 0x1da0b8fc.
//
// Solidity: function getHash(addr address) constant returns(bytes32)
func (_Investor *InvestorCallerSession) GetHash(addr common.Address) ([32]byte, error) {
	return _Investor.Contract.GetHash(&_Investor.CallOpts, addr)
}

// IsLocked is a free data retrieval call binding the contract method 0xa4e2d634.
//
// Solidity: function isLocked() constant returns(bool)
func (_Investor *InvestorCaller) IsLocked(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Investor.contract.Call(opts, out, "isLocked")
	return *ret0, err
}

// IsLocked is a free data retrieval call binding the contract method 0xa4e2d634.
//
// Solidity: function isLocked() constant returns(bool)
func (_Investor *InvestorSession) IsLocked() (bool, error) {
	return _Investor.Contract.IsLocked(&_Investor.CallOpts)
}

// IsLocked is a free data retrieval call binding the contract method 0xa4e2d634.
//
// Solidity: function isLocked() constant returns(bool)
func (_Investor *InvestorCallerSession) IsLocked() (bool, error) {
	return _Investor.Contract.IsLocked(&_Investor.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Investor *InvestorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Investor.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Investor *InvestorSession) Owner() (common.Address, error) {
	return _Investor.Contract.Owner(&_Investor.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Investor *InvestorCallerSession) Owner() (common.Address, error) {
	return _Investor.Contract.Owner(&_Investor.CallOpts)
}

// Store is a free data retrieval call binding the contract method 0x975057e7.
//
// Solidity: function store() constant returns(address)
func (_Investor *InvestorCaller) Store(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Investor.contract.Call(opts, out, "store")
	return *ret0, err
}

// Store is a free data retrieval call binding the contract method 0x975057e7.
//
// Solidity: function store() constant returns(address)
func (_Investor *InvestorSession) Store() (common.Address, error) {
	return _Investor.Contract.Store(&_Investor.CallOpts)
}

// Store is a free data retrieval call binding the contract method 0x975057e7.
//
// Solidity: function store() constant returns(address)
func (_Investor *InvestorCallerSession) Store() (common.Address, error) {
	return _Investor.Contract.Store(&_Investor.CallOpts)
}

// Add is a paid mutator transaction binding the contract method 0x45eb8a9b.
//
// Solidity: function add(investor address, hash bytes32, country bytes2, accreditation uint48) returns()
func (_Investor *InvestorTransactor) Add(opts *bind.TransactOpts, investor common.Address, hash [32]byte, country [2]byte, accreditation *big.Int) (*types.Transaction, error) {
	return _Investor.contract.Transact(opts, "add", investor, hash, country, accreditation)
}

// Add is a paid mutator transaction binding the contract method 0x45eb8a9b.
//
// Solidity: function add(investor address, hash bytes32, country bytes2, accreditation uint48) returns()
func (_Investor *InvestorSession) Add(investor common.Address, hash [32]byte, country [2]byte, accreditation *big.Int) (*types.Transaction, error) {
	return _Investor.Contract.Add(&_Investor.TransactOpts, investor, hash, country, accreditation)
}

// Add is a paid mutator transaction binding the contract method 0x45eb8a9b.
//
// Solidity: function add(investor address, hash bytes32, country bytes2, accreditation uint48) returns()
func (_Investor *InvestorTransactorSession) Add(investor common.Address, hash [32]byte, country [2]byte, accreditation *big.Int) (*types.Transaction, error) {
	return _Investor.Contract.Add(&_Investor.TransactOpts, investor, hash, country, accreditation)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Investor *InvestorTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Investor.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Investor *InvestorSession) Kill() (*types.Transaction, error) {
	return _Investor.Contract.Kill(&_Investor.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Investor *InvestorTransactorSession) Kill() (*types.Transaction, error) {
	return _Investor.Contract.Kill(&_Investor.TransactOpts)
}

// Remove is a paid mutator transaction binding the contract method 0x29092d0e.
//
// Solidity: function remove(investor address) returns()
func (_Investor *InvestorTransactor) Remove(opts *bind.TransactOpts, investor common.Address) (*types.Transaction, error) {
	return _Investor.contract.Transact(opts, "remove", investor)
}

// Remove is a paid mutator transaction binding the contract method 0x29092d0e.
//
// Solidity: function remove(investor address) returns()
func (_Investor *InvestorSession) Remove(investor common.Address) (*types.Transaction, error) {
	return _Investor.Contract.Remove(&_Investor.TransactOpts, investor)
}

// Remove is a paid mutator transaction binding the contract method 0x29092d0e.
//
// Solidity: function remove(investor address) returns()
func (_Investor *InvestorTransactorSession) Remove(investor common.Address) (*types.Transaction, error) {
	return _Investor.Contract.Remove(&_Investor.TransactOpts, investor)
}

// SetAccreditation is a paid mutator transaction binding the contract method 0x1518c5bc.
//
// Solidity: function setAccreditation(investor address, accreditation uint48) returns()
func (_Investor *InvestorTransactor) SetAccreditation(opts *bind.TransactOpts, investor common.Address, accreditation *big.Int) (*types.Transaction, error) {
	return _Investor.contract.Transact(opts, "setAccreditation", investor, accreditation)
}

// SetAccreditation is a paid mutator transaction binding the contract method 0x1518c5bc.
//
// Solidity: function setAccreditation(investor address, accreditation uint48) returns()
func (_Investor *InvestorSession) SetAccreditation(investor common.Address, accreditation *big.Int) (*types.Transaction, error) {
	return _Investor.Contract.SetAccreditation(&_Investor.TransactOpts, investor, accreditation)
}

// SetAccreditation is a paid mutator transaction binding the contract method 0x1518c5bc.
//
// Solidity: function setAccreditation(investor address, accreditation uint48) returns()
func (_Investor *InvestorTransactorSession) SetAccreditation(investor common.Address, accreditation *big.Int) (*types.Transaction, error) {
	return _Investor.Contract.SetAccreditation(&_Investor.TransactOpts, investor, accreditation)
}

// SetCountry is a paid mutator transaction binding the contract method 0x242371a3.
//
// Solidity: function setCountry(investor address, country bytes2) returns()
func (_Investor *InvestorTransactor) SetCountry(opts *bind.TransactOpts, investor common.Address, country [2]byte) (*types.Transaction, error) {
	return _Investor.contract.Transact(opts, "setCountry", investor, country)
}

// SetCountry is a paid mutator transaction binding the contract method 0x242371a3.
//
// Solidity: function setCountry(investor address, country bytes2) returns()
func (_Investor *InvestorSession) SetCountry(investor common.Address, country [2]byte) (*types.Transaction, error) {
	return _Investor.Contract.SetCountry(&_Investor.TransactOpts, investor, country)
}

// SetCountry is a paid mutator transaction binding the contract method 0x242371a3.
//
// Solidity: function setCountry(investor address, country bytes2) returns()
func (_Investor *InvestorTransactorSession) SetCountry(investor common.Address, country [2]byte) (*types.Transaction, error) {
	return _Investor.Contract.SetCountry(&_Investor.TransactOpts, investor, country)
}

// SetFrozen is a paid mutator transaction binding the contract method 0xac869cd8.
//
// Solidity: function setFrozen(investor address, frozen bool) returns()
func (_Investor *InvestorTransactor) SetFrozen(opts *bind.TransactOpts, investor common.Address, frozen bool) (*types.Transaction, error) {
	return _Investor.contract.Transact(opts, "setFrozen", investor, frozen)
}

// SetFrozen is a paid mutator transaction binding the contract method 0xac869cd8.
//
// Solidity: function setFrozen(investor address, frozen bool) returns()
func (_Investor *InvestorSession) SetFrozen(investor common.Address, frozen bool) (*types.Transaction, error) {
	return _Investor.Contract.SetFrozen(&_Investor.TransactOpts, investor, frozen)
}

// SetFrozen is a paid mutator transaction binding the contract method 0xac869cd8.
//
// Solidity: function setFrozen(investor address, frozen bool) returns()
func (_Investor *InvestorTransactorSession) SetFrozen(investor common.Address, frozen bool) (*types.Transaction, error) {
	return _Investor.Contract.SetFrozen(&_Investor.TransactOpts, investor, frozen)
}

// SetHash is a paid mutator transaction binding the contract method 0xe84b8169.
//
// Solidity: function setHash(investor address, hash bytes32) returns()
func (_Investor *InvestorTransactor) SetHash(opts *bind.TransactOpts, investor common.Address, hash [32]byte) (*types.Transaction, error) {
	return _Investor.contract.Transact(opts, "setHash", investor, hash)
}

// SetHash is a paid mutator transaction binding the contract method 0xe84b8169.
//
// Solidity: function setHash(investor address, hash bytes32) returns()
func (_Investor *InvestorSession) SetHash(investor common.Address, hash [32]byte) (*types.Transaction, error) {
	return _Investor.Contract.SetHash(&_Investor.TransactOpts, investor, hash)
}

// SetHash is a paid mutator transaction binding the contract method 0xe84b8169.
//
// Solidity: function setHash(investor address, hash bytes32) returns()
func (_Investor *InvestorTransactorSession) SetHash(investor common.Address, hash [32]byte) (*types.Transaction, error) {
	return _Investor.Contract.SetHash(&_Investor.TransactOpts, investor, hash)
}

// SetLocked is a paid mutator transaction binding the contract method 0x211e28b6.
//
// Solidity: function setLocked(locked bool) returns()
func (_Investor *InvestorTransactor) SetLocked(opts *bind.TransactOpts, locked bool) (*types.Transaction, error) {
	return _Investor.contract.Transact(opts, "setLocked", locked)
}

// SetLocked is a paid mutator transaction binding the contract method 0x211e28b6.
//
// Solidity: function setLocked(locked bool) returns()
func (_Investor *InvestorSession) SetLocked(locked bool) (*types.Transaction, error) {
	return _Investor.Contract.SetLocked(&_Investor.TransactOpts, locked)
}

// SetLocked is a paid mutator transaction binding the contract method 0x211e28b6.
//
// Solidity: function setLocked(locked bool) returns()
func (_Investor *InvestorTransactorSession) SetLocked(locked bool) (*types.Transaction, error) {
	return _Investor.Contract.SetLocked(&_Investor.TransactOpts, locked)
}

// SetStorage is a paid mutator transaction binding the contract method 0x9137c1a7.
//
// Solidity: function setStorage(s address) returns()
func (_Investor *InvestorTransactor) SetStorage(opts *bind.TransactOpts, s common.Address) (*types.Transaction, error) {
	return _Investor.contract.Transact(opts, "setStorage", s)
}

// SetStorage is a paid mutator transaction binding the contract method 0x9137c1a7.
//
// Solidity: function setStorage(s address) returns()
func (_Investor *InvestorSession) SetStorage(s common.Address) (*types.Transaction, error) {
	return _Investor.Contract.SetStorage(&_Investor.TransactOpts, s)
}

// SetStorage is a paid mutator transaction binding the contract method 0x9137c1a7.
//
// Solidity: function setStorage(s address) returns()
func (_Investor *InvestorTransactorSession) SetStorage(s common.Address) (*types.Transaction, error) {
	return _Investor.Contract.SetStorage(&_Investor.TransactOpts, s)
}

// TransferOwner is a paid mutator transaction binding the contract method 0x4fb2e45d.
//
// Solidity: function transferOwner(newOwner address) returns()
func (_Investor *InvestorTransactor) TransferOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Investor.contract.Transact(opts, "transferOwner", newOwner)
}

// TransferOwner is a paid mutator transaction binding the contract method 0x4fb2e45d.
//
// Solidity: function transferOwner(newOwner address) returns()
func (_Investor *InvestorSession) TransferOwner(newOwner common.Address) (*types.Transaction, error) {
	return _Investor.Contract.TransferOwner(&_Investor.TransactOpts, newOwner)
}

// TransferOwner is a paid mutator transaction binding the contract method 0x4fb2e45d.
//
// Solidity: function transferOwner(newOwner address) returns()
func (_Investor *InvestorTransactorSession) TransferOwner(newOwner common.Address) (*types.Transaction, error) {
	return _Investor.Contract.TransferOwner(&_Investor.TransactOpts, newOwner)
}

// InvestorInvestorAddedIterator is returned from FilterInvestorAdded and is used to iterate over the raw logs and unpacked data for InvestorAdded events raised by the Investor contract.
type InvestorInvestorAddedIterator struct {
	Event *InvestorInvestorAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InvestorInvestorAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InvestorInvestorAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InvestorInvestorAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InvestorInvestorAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InvestorInvestorAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InvestorInvestorAdded represents a InvestorAdded event raised by the Investor contract.
type InvestorInvestorAdded struct {
	Investor common.Address
	Owner    common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterInvestorAdded is a free log retrieval operation binding the contract event 0xe99183cc0b1657b54afa611991294ec1e4c458d7c36910518e2a5b76b2b6e73f.
//
// Solidity: e InvestorAdded(investor indexed address, owner indexed address)
func (_Investor *InvestorFilterer) FilterInvestorAdded(opts *bind.FilterOpts, investor []common.Address, owner []common.Address) (*InvestorInvestorAddedIterator, error) {

	var investorRule []interface{}
	for _, investorItem := range investor {
		investorRule = append(investorRule, investorItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Investor.contract.FilterLogs(opts, "InvestorAdded", investorRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &InvestorInvestorAddedIterator{contract: _Investor.contract, event: "InvestorAdded", logs: logs, sub: sub}, nil
}

// WatchInvestorAdded is a free log subscription operation binding the contract event 0xe99183cc0b1657b54afa611991294ec1e4c458d7c36910518e2a5b76b2b6e73f.
//
// Solidity: e InvestorAdded(investor indexed address, owner indexed address)
func (_Investor *InvestorFilterer) WatchInvestorAdded(opts *bind.WatchOpts, sink chan<- *InvestorInvestorAdded, investor []common.Address, owner []common.Address) (event.Subscription, error) {

	var investorRule []interface{}
	for _, investorItem := range investor {
		investorRule = append(investorRule, investorItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Investor.contract.WatchLogs(opts, "InvestorAdded", investorRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InvestorInvestorAdded)
				if err := _Investor.contract.UnpackLog(event, "InvestorAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InvestorInvestorFrozenIterator is returned from FilterInvestorFrozen and is used to iterate over the raw logs and unpacked data for InvestorFrozen events raised by the Investor contract.
type InvestorInvestorFrozenIterator struct {
	Event *InvestorInvestorFrozen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InvestorInvestorFrozenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InvestorInvestorFrozen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InvestorInvestorFrozen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InvestorInvestorFrozenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InvestorInvestorFrozenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InvestorInvestorFrozen represents a InvestorFrozen event raised by the Investor contract.
type InvestorInvestorFrozen struct {
	Investor common.Address
	Frozen   bool
	Owner    common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterInvestorFrozen is a free log retrieval operation binding the contract event 0x6d30448ca28c66e149273ddd6d39fe9cb1982d4013649080aeb9d8251356d381.
//
// Solidity: e InvestorFrozen(investor indexed address, frozen indexed bool, owner indexed address)
func (_Investor *InvestorFilterer) FilterInvestorFrozen(opts *bind.FilterOpts, investor []common.Address, frozen []bool, owner []common.Address) (*InvestorInvestorFrozenIterator, error) {

	var investorRule []interface{}
	for _, investorItem := range investor {
		investorRule = append(investorRule, investorItem)
	}
	var frozenRule []interface{}
	for _, frozenItem := range frozen {
		frozenRule = append(frozenRule, frozenItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Investor.contract.FilterLogs(opts, "InvestorFrozen", investorRule, frozenRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &InvestorInvestorFrozenIterator{contract: _Investor.contract, event: "InvestorFrozen", logs: logs, sub: sub}, nil
}

// WatchInvestorFrozen is a free log subscription operation binding the contract event 0x6d30448ca28c66e149273ddd6d39fe9cb1982d4013649080aeb9d8251356d381.
//
// Solidity: e InvestorFrozen(investor indexed address, frozen indexed bool, owner indexed address)
func (_Investor *InvestorFilterer) WatchInvestorFrozen(opts *bind.WatchOpts, sink chan<- *InvestorInvestorFrozen, investor []common.Address, frozen []bool, owner []common.Address) (event.Subscription, error) {

	var investorRule []interface{}
	for _, investorItem := range investor {
		investorRule = append(investorRule, investorItem)
	}
	var frozenRule []interface{}
	for _, frozenItem := range frozen {
		frozenRule = append(frozenRule, frozenItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Investor.contract.WatchLogs(opts, "InvestorFrozen", investorRule, frozenRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InvestorInvestorFrozen)
				if err := _Investor.contract.UnpackLog(event, "InvestorFrozen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InvestorInvestorRemovedIterator is returned from FilterInvestorRemoved and is used to iterate over the raw logs and unpacked data for InvestorRemoved events raised by the Investor contract.
type InvestorInvestorRemovedIterator struct {
	Event *InvestorInvestorRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InvestorInvestorRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InvestorInvestorRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InvestorInvestorRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InvestorInvestorRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InvestorInvestorRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InvestorInvestorRemoved represents a InvestorRemoved event raised by the Investor contract.
type InvestorInvestorRemoved struct {
	Investor common.Address
	Owner    common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterInvestorRemoved is a free log retrieval operation binding the contract event 0xd8755221287ca1f6b28807977a086f5534d9e02ea27ebad003d7cb1a95659a46.
//
// Solidity: e InvestorRemoved(investor indexed address, owner indexed address)
func (_Investor *InvestorFilterer) FilterInvestorRemoved(opts *bind.FilterOpts, investor []common.Address, owner []common.Address) (*InvestorInvestorRemovedIterator, error) {

	var investorRule []interface{}
	for _, investorItem := range investor {
		investorRule = append(investorRule, investorItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Investor.contract.FilterLogs(opts, "InvestorRemoved", investorRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &InvestorInvestorRemovedIterator{contract: _Investor.contract, event: "InvestorRemoved", logs: logs, sub: sub}, nil
}

// WatchInvestorRemoved is a free log subscription operation binding the contract event 0xd8755221287ca1f6b28807977a086f5534d9e02ea27ebad003d7cb1a95659a46.
//
// Solidity: e InvestorRemoved(investor indexed address, owner indexed address)
func (_Investor *InvestorFilterer) WatchInvestorRemoved(opts *bind.WatchOpts, sink chan<- *InvestorInvestorRemoved, investor []common.Address, owner []common.Address) (event.Subscription, error) {

	var investorRule []interface{}
	for _, investorItem := range investor {
		investorRule = append(investorRule, investorItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Investor.contract.WatchLogs(opts, "InvestorRemoved", investorRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InvestorInvestorRemoved)
				if err := _Investor.contract.UnpackLog(event, "InvestorRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// InvestorOwnerTransferredIterator is returned from FilterOwnerTransferred and is used to iterate over the raw logs and unpacked data for OwnerTransferred events raised by the Investor contract.
type InvestorOwnerTransferredIterator struct {
	Event *InvestorOwnerTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InvestorOwnerTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InvestorOwnerTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InvestorOwnerTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InvestorOwnerTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InvestorOwnerTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InvestorOwnerTransferred represents a OwnerTransferred event raised by the Investor contract.
type InvestorOwnerTransferred struct {
	OldOwner common.Address
	NewOwner common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOwnerTransferred is a free log retrieval operation binding the contract event 0x8934ce4adea8d9ce0d714d2c22b86790e41b7731c84b926fbbdc1d40ff6533c9.
//
// Solidity: e OwnerTransferred(oldOwner indexed address, newOwner indexed address)
func (_Investor *InvestorFilterer) FilterOwnerTransferred(opts *bind.FilterOpts, oldOwner []common.Address, newOwner []common.Address) (*InvestorOwnerTransferredIterator, error) {

	var oldOwnerRule []interface{}
	for _, oldOwnerItem := range oldOwner {
		oldOwnerRule = append(oldOwnerRule, oldOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Investor.contract.FilterLogs(opts, "OwnerTransferred", oldOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &InvestorOwnerTransferredIterator{contract: _Investor.contract, event: "OwnerTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnerTransferred is a free log subscription operation binding the contract event 0x8934ce4adea8d9ce0d714d2c22b86790e41b7731c84b926fbbdc1d40ff6533c9.
//
// Solidity: e OwnerTransferred(oldOwner indexed address, newOwner indexed address)
func (_Investor *InvestorFilterer) WatchOwnerTransferred(opts *bind.WatchOpts, sink chan<- *InvestorOwnerTransferred, oldOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var oldOwnerRule []interface{}
	for _, oldOwnerItem := range oldOwner {
		oldOwnerRule = append(oldOwnerRule, oldOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Investor.contract.WatchLogs(opts, "OwnerTransferred", oldOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InvestorOwnerTransferred)
				if err := _Investor.contract.UnpackLog(event, "OwnerTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
